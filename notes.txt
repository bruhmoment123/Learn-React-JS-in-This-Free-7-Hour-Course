timestamp:5:13:50

react hooks allows for creating stateful components without class 
useState Hook returns an array: the value of set, and the setter
you can have as many `as you want in a component
NEVER directly mutate the state and instead give it new values as it will not re-render the component
ALWAYS use the setter provided
when a state is changed and re-rendered, only the stuff that has changed are re-rendered and not the whole page

Props can be sent to components to make it dynamic 
props should never be changed in the component it is sent to

styled-components benefits:
scoped CSS
nest
no polyfills 
able to use props
const button = styled.button`` - tagged template literal

imports:
{} are for non-default imports

using index.js as file:
when importing a component from a folder, if named index.js, it will automatically imported.
For example:
import Component from './Component' is sufficient
however, if the original index.js was instead something like test.js,
you will need to import like this:
import Component from './Component/test.js'
however, a downside is that if you have large amounts of component folders with index.js, 
it will get confusing when opening multiple of them 

promise:
https://www.youtube.com/watch?v=DHvZLI7Db8E&ab_channel=WebDevSimplified 
https://www.youtube.com/watch?v=V_Kr9OSfDeU&ab_channel=WebDevSimplified 
it was created as a means to replace callbacks
a promise is exactly like it sounds
you create a new promise object and it takes a function and passes two parameters: resolve and reject
in the function you can create conditions for resolve and reject
after that, you use the .then() method to say what happens when the promise is resolved
the parameter or parameters it takes depends on the parameters you passed when the promise 
is resolved in the promise object
the same applies for when the promise is rejected except you use .catch() method 
Promise.all() allows you to run all the promises in parallel which takes in a array of promises
.then() returns an array of all of whatever the resolved returns arej
Promise.race() is the same as .all() except it will return as soon as when one of is completed
it will only return one value 

async:
async follows the same principle as promises except that it makes things easier 
wrap your function in an async 
use await on any asynchronous function to actually return the responses or else it will only return the promises

React mount:
when elements are put into the DOM

.env, depending on the scope of the app, is not refreshed as edits are made

({}) -> returns an object in an inline function
whereas {} returns a function in an inline function


...object:
called spreads, this syntax spreads the object

https://stackoverflow.com/questions/35440265/curly-brackets-in-arrow-functions 
In an arrow function:
{} -> The pair of braces forms a block, containing a list of statements. You need to use a return statement explicitly to make the function return something:
({}) -> returns object
() -> implicit return

reacttraining
.env
js function vs arrow function
spread operator 
clearTimeout
PropTypes


Local Storage:persists until removing it yourself
Session Storage:only persists over sessions 